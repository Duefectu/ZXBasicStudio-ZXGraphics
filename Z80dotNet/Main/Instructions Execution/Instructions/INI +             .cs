
// AUTOGENERATED CODE
//
// Do not make changes directly to this (.cs) file.
// Change "INI +             .tt" instead.

namespace Konamiman.Z80dotNet
{
    public partial class Z80InstructionExecutor
    {
        /// <summary>
        /// The INI instruction.
        /// </summary>
        byte INI()
        {
            FetchFinished();

            var value = ProcessorAgent.ReadFromPort(Registers.C, Registers.B);
            ProcessorAgent.WriteToMemory((ushort)Registers.HL, value);

            Registers.HL++;
            var counter = Registers.B;
            counter = (byte)(counter - 1);
            Registers.B = counter;
            Registers.ZF = (counter == 0);
            Registers.NF = 1;
            Registers.SF = counter.GetBit(7);
            SetFlags3and5From(counter);


            return 16;
        }

        /// <summary>
        /// The IND instruction.
        /// </summary>
        byte IND()
        {
            FetchFinished();

            var value = ProcessorAgent.ReadFromPort(Registers.C, Registers.B);
            ProcessorAgent.WriteToMemory((ushort)Registers.HL, value);

            Registers.HL--;
            var counter = Registers.B;
            counter = (byte)(counter - 1);
            Registers.B = counter;
            Registers.ZF = (counter == 0);
            Registers.NF = 1;
            Registers.SF = counter.GetBit(7);
            SetFlags3and5From(counter);


            return 16;
        }

        /// <summary>
        /// The INIR instruction.
        /// </summary>
        byte INIR()
        {
            FetchFinished();

            var value = ProcessorAgent.ReadFromPort(Registers.C, Registers.B);
            ProcessorAgent.WriteToMemory((ushort)Registers.HL, value);

            Registers.HL++;
            var counter = Registers.B;
            counter = (byte)(counter - 1);
            Registers.B = counter;
            Registers.ZF = (counter == 0);
            Registers.NF = 1;
            Registers.SF = counter.GetBit(7);
            SetFlags3and5From(counter);

			if(counter != 0) {
				Registers.PC = (ushort)(Registers.PC - 2);
				return 21;
			}

            return 16;
        }

        /// <summary>
        /// The INDR instruction.
        /// </summary>
        byte INDR()
        {
            FetchFinished();

            var value = ProcessorAgent.ReadFromPort(Registers.C, Registers.B);
            ProcessorAgent.WriteToMemory((ushort)Registers.HL, value);

            Registers.HL--;
            var counter = Registers.B;
            counter = (byte)(counter - 1);
            Registers.B = counter;
            Registers.ZF = (counter == 0);
            Registers.NF = 1;
            Registers.SF = counter.GetBit(7);
            SetFlags3and5From(counter);

			if(counter != 0) {
				Registers.PC = (ushort)(Registers.PC - 2);
				return 21;
			}

            return 16;
        }

        /// <summary>
        /// The OUTI instruction.
        /// </summary>
        byte OUTI()
        {
            FetchFinished();

            var value = ProcessorAgent.ReadFromMemory((ushort)Registers.HL);
            ProcessorAgent.WriteToPort(Registers.C, Registers.B, value);

            Registers.HL++;
            var counter = Registers.B;
            counter = (byte)(counter - 1);
            Registers.B = counter;
            Registers.ZF = (counter == 0);
            Registers.NF = 1;
            Registers.SF = counter.GetBit(7);
            SetFlags3and5From(counter);


            return 16;
        }

        /// <summary>
        /// The OUTD instruction.
        /// </summary>
        byte OUTD()
        {
            FetchFinished();

            var value = ProcessorAgent.ReadFromMemory((ushort)Registers.HL);
            ProcessorAgent.WriteToPort(Registers.C, Registers.B, value);

            Registers.HL--;
            var counter = Registers.B;
            counter = (byte)(counter - 1);
            Registers.B = counter;
            Registers.ZF = (counter == 0);
            Registers.NF = 1;
            Registers.SF = counter.GetBit(7);
            SetFlags3and5From(counter);


            return 16;
        }

        /// <summary>
        /// The OTIR instruction.
        /// </summary>
        byte OTIR()
        {
            FetchFinished();

            var value = ProcessorAgent.ReadFromMemory((ushort)Registers.HL);
            ProcessorAgent.WriteToPort(Registers.C, Registers.B, value);

            Registers.HL++;
            var counter = Registers.B;
            counter = (byte)(counter - 1);
            Registers.B = counter;
            Registers.ZF = (counter == 0);
            Registers.NF = 1;
            Registers.SF = counter.GetBit(7);
            SetFlags3and5From(counter);

			if(counter != 0) {
				Registers.PC = (ushort)(Registers.PC - 2);
				return 21;
			}

            return 16;
        }

        /// <summary>
        /// The OTDR instruction.
        /// </summary>
        byte OTDR()
        {
            FetchFinished();

            var value = ProcessorAgent.ReadFromMemory((ushort)Registers.HL);
            ProcessorAgent.WriteToPort(Registers.C, Registers.B, value);

            Registers.HL--;
            var counter = Registers.B;
            counter = (byte)(counter - 1);
            Registers.B = counter;
            Registers.ZF = (counter == 0);
            Registers.NF = 1;
            Registers.SF = counter.GetBit(7);
            SetFlags3and5From(counter);

			if(counter != 0) {
				Registers.PC = (ushort)(Registers.PC - 2);
				return 21;
			}

            return 16;
        }

    }
}
